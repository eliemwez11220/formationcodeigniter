<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Newsletter extends CI_Controller{
    function __construct()
    {
        parent::__construct();
        $this->load->model('Newsletter_model');
    } 

    /*
     * Listing of newsletters
     */
    function index()
    {
        $params['limit'] = RECORDS_PER_PAGE; 
        $params['offset'] = ($this->input->get('per_page')) ? $this->input->get('per_page') : 0;
        
        $config = $this->config->item('pagination');
        $config['base_url'] = site_url('newsletter/index?');
        $config['total_rows'] = $this->Newsletter_model->get_all_newsletters_count();
        $this->pagination->initialize($config);

        $data['newsletters'] = $this->Newsletter_model->get_all_newsletters($params);
        
        $data['_view'] = 'newsletter/index';
        $this->load->view('layouts/main',$data);
    }

    /*
     * Adding a new newsletter
     */
    function add()
    {   
        $this->load->library('form_validation');

		$this->form_validation->set_rules('newsletter_email','Newsletter Email','valid_email|is_unique[newsletters.newsletter_email]');
		
		if($this->form_validation->run())     
        {   
            $params = array(
				'newsletter_nom' => $this->input->post('newsletter_nom'),
				'newsletter_email' => $this->input->post('newsletter_email'),
				'newsletter_statut' => $this->input->post('newsletter_statut'),
				'newsletter_created_at' => $this->input->post('newsletter_created_at'),
				'newsletter_created_by' => $this->input->post('newsletter_created_by'),
				'newsletter_updated_at' => $this->input->post('newsletter_updated_at'),
				'newsletter_updated_by' => $this->input->post('newsletter_updated_by'),
				'newsletter_deleted_at' => $this->input->post('newsletter_deleted_at'),
				'newsletter_deleted_by' => $this->input->post('newsletter_deleted_by'),
            );
            
            $newsletter_id = $this->Newsletter_model->add_newsletter($params);
            redirect('newsletter/index');
        }
        else
        {            
            $data['_view'] = 'newsletter/add';
            $this->load->view('layouts/main',$data);
        }
    }  

    /*
     * Editing a newsletter
     */
    function edit($newsletter_uid)
    {   
        // check if the newsletter exists before trying to edit it
        $data['newsletter'] = $this->Newsletter_model->get_newsletter($newsletter_uid);
        
        if(isset($data['newsletter']['newsletter_uid']))
        {
            $this->load->library('form_validation');

			$this->form_validation->set_rules('newsletter_email','Newsletter Email','valid_email|is_unique[newsletters.newsletter_email]');
		
			if($this->form_validation->run())     
            {   
                $params = array(
					'newsletter_nom' => $this->input->post('newsletter_nom'),
					'newsletter_email' => $this->input->post('newsletter_email'),
					'newsletter_statut' => $this->input->post('newsletter_statut'),
					'newsletter_created_at' => $this->input->post('newsletter_created_at'),
					'newsletter_created_by' => $this->input->post('newsletter_created_by'),
					'newsletter_updated_at' => $this->input->post('newsletter_updated_at'),
					'newsletter_updated_by' => $this->input->post('newsletter_updated_by'),
					'newsletter_deleted_at' => $this->input->post('newsletter_deleted_at'),
					'newsletter_deleted_by' => $this->input->post('newsletter_deleted_by'),
                );

                $this->Newsletter_model->update_newsletter($newsletter_uid,$params);            
                redirect('newsletter/index');
            }
            else
            {
                $data['_view'] = 'newsletter/edit';
                $this->load->view('layouts/main',$data);
            }
        }
        else
            show_error('The newsletter you are trying to edit does not exist.');
    } 

    /*
     * Deleting newsletter
     */
    function remove($newsletter_uid)
    {
        $newsletter = $this->Newsletter_model->get_newsletter($newsletter_uid);

        // check if the newsletter exists before trying to delete it
        if(isset($newsletter['newsletter_uid']))
        {
            $this->Newsletter_model->delete_newsletter($newsletter_uid);
            redirect('newsletter/index');
        }
        else
            show_error('The newsletter you are trying to delete does not exist.');
    }
    
}
